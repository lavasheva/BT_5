const WebSocket = require('ws'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket
const { ApolloServer, gql } = require('apollo-server-express');
const express = require('express');
const fs = require('fs');
require('dotenv').config(); // –ü–æ–¥–∫–ª—é—á–∞–µ–º dotenv 
const jwt = require('jsonwebtoken'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º JWT 
const path = require('path');
const swaggerJsDoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const cors = require('cors');
const PORT = 3000;
let users = []; // –ü—Ä–æ—Å—Ç–∞—è "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ 

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã GraphQL
const typeDefs = gql`
  type Product {
    id: ID!
    name: String!
    price: Float!
    description: String
    categories: [String]
  }

  type Query {
    products: [Product]
    product(id: ID!): Product
  }
`;

const app = express();
app.use(cors());
app.use(express.json());

const SECRET_KEY = process.env.JWT_SECRET;

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
function authenticateToken(req, res, next) {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
    const authHeader = req.headers['authorization'];
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (—Ñ–æ—Ä–º–∞—Ç: "Bearer <token>")
    const token = authHeader && authHeader.split(' ')[1];
    
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if (!token) {
      return res.status(401).json({ 
        message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' 
      });
    }
    
    // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    jwt.verify(token, SECRET_KEY, (err, user) => {
      if (err) {
        return res.status(403).json({ 
          message: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω' 
        });
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
      req.user = user;
      
      // –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É middleware/–æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
      next();
    });
}


// –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ products.json
let products = [];
function loadProducts() {
    try {
        const filePath = path.join(__dirname, 'products.json');
        const data = fs.readFileSync(filePath, 'utf-8');
        const jsonData = JSON.parse(data);
        return jsonData.products; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤ products
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ products.json:', err);
        return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
}

function saveProducts() {
    try {
        const filePath = path.join(__dirname, 'products.json');
        const dataToSave = { products }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º "products"
        fs.writeFileSync(filePath, JSON.stringify(dataToSave, null, 2));
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ products.json:', err);
    }
}

const resolvers = {
    Query: {
        products: () => loadProducts(),
        product: (_, { id }) => loadProducts().find(p => p.id == id),
    }
};


// –°–æ–∑–¥–∞—ë–º GraphQL-—Å–µ—Ä–≤–µ—Ä
const server = new ApolloServer({ typeDefs, resolvers });

async function startServer() {
    await server.start();
    server.applyMiddleware({ app });

    // Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
const swaggerOptions = {
    swaggerDefinition: {
        openapi: '3.0.0',
        info: {
            title: 'Product Management API',
            version: '1.0.0',
            description: 'API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏',
        },
        servers: [
            {
                url: 'http://localhost:3000',
            },
        ],
    },
    apis: ['openapi.yaml'], // —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏
};
    const swaggerDocs = swaggerJsDoc(swaggerOptions);
    app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocs));
    app.listen(PORT, () => {
        console.log(`GraphQL API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}/graphql`);
        console.log(`Swagger API Docs: http://localhost:${PORT}/api-docs`);
    });

    const wss = new WebSocket.Server({ port: 8080 }); // WebSocket-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8080

    wss.on('connection', (ws) => {
        console.log('–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É');

        ws.on('message', (message) => {
            console.log('üì© –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', message.toString());
        
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
            wss.clients.forEach(client => {
                if (client !== ws && client.readyState === WebSocket.OPEN) {
                    client.send(JSON.stringify({ text: message.toString() })); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON
                }
            });
        });
        

        ws.on('close', () => {
            console.log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
        });
    });

    console.log('WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://localhost:8080');

}

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
app.get('/products', (req, res) => {
    res.json(loadProducts());
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
app.post('/products', (req, res) => {
    const { name, price, description, categories } = req.body;
    if (!name || !price || !description || !categories) {
        return res.status(400).json({ message: 'Name, price, description, and categories are required' });
    }
    const newProduct = {
        id: Date.now(), // –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
        name,
        price,
        description,
        categories
    };
    products.push(newProduct);
    saveProducts();
    res.status(201).json(newProduct);
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
app.get('/products/:id', (req, res) => {
    const productId = parseInt(req.params.id);
    const product = loadProducts().find(p => p.id === productId);
    if (product) {
        res.json(product);
    } else {
        res.status(404).json({ message: 'Product not found' });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
app.put('/products/:id', (req, res) => {
    const productId = parseInt(req.params.id);
    const product = loadProducts().find(p => p.id === productId);
    if (product) {
        const { name, price, description, categories } = req.body;
        product.name = name !== undefined ? name : product.name;
        product.price = price !== undefined ? price : product.price;
        product.description = description !== undefined ? description : product.description;
        product.categories = categories !== undefined ? categories : product.categories;
        saveProducts();
        res.json(product);
    } else {
        res.status(404).json({ message: 'Product not found' });
    }
});

// –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
app.delete('/products/:id', (req, res) => {
    const productId = parseInt(req.params.id);
    const initialLength = products.length;
    products = products.filter(p => p.id !== productId);
    if (products.length === initialLength) {
        return res.status(404).json({ message: 'Product not found' });
    }
    saveProducts();
    res.status(204).send();
});


app.post('/register', (req, res) => {
    const { username, password } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    const existingUser = users.find(user => user.username === username);
    
    if (existingUser) {
      return res.status(400).json({
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      });
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser = {
      id: users.length + 1,
      username,
      password // !!! –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å (–±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è)
    };
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞—Å—Å–∏–≤
    users.push(newUser);
    
    // –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    res.status(201).json({ 
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ' 
    });
  });


app.post('/login', (req, res) => {
    const { username, password } = req.body;
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞—Å—Å–∏–≤–µ users
    const user = users.find(
      user => user.username === username && user.password === password
    );
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π
    if (!user) {
      return res.status(401).json({ 
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
      });
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign(
      { 
        id: user.id, 
        username: user.username 
      }, 
      SECRET_KEY, 
      { expiresIn: '1h' } // –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 1 —á–∞—Å
    );
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É
    res.json({ token });
});


// –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç, —Ç—Ä–µ–±—É—é—â–∏–π –≤–∞–ª–∏–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω
app.get('/protected', authenticateToken, (req, res) => {
    res.json({
      message: '–î–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â—ë–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –ø–æ–ª—É—á–µ–Ω!',
      user: req.user    // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    });
  });

startServer(); // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
